name:                unique-words
version:             0.1.0.0
github:              "vladciobanu/unique-words"
license:             Unlicense
author:              "Author name here"
maintainer:          "example@example.com"
copyright:           "2020 Author name here"
extra-source-files:
- README.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/vladciobanu/unique-words#readme>

dependencies:
- base >= 4.7 && < 5

# Last updated as of ghc-8.10.2
default-extensions:
  - ApplicativeDo
  - BangPatterns
  - BinaryLiterals
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - DerivingVia
  - DuplicateRecordFields
  - EmptyCase
  - EmptyDataDecls
  - EmptyDataDeriving
  - ExistentialQuantification
  - ExplicitNamespaces
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - ImportQualifiedPost
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - NamedWildCards
  - NoImplicitPrelude
  - NoMonomorphismRestriction
  - NumericUnderscores
  - OverloadedLabels
  - OverloadedStrings
  - PatternSynonyms
  - PolyKinds
  - QuantifiedConstraints
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - RoleAnnotations
  - ScopedTypeVariables
  - StandaloneDeriving
  - StandaloneKindSignatures
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeFamilyDependencies
  - TypeOperators
  - ViewPatterns

ghc-options:
  - -Weverything
  - -Wno-missing-home-modules # Behavior doesn't make sense
  - -Wno-redundant-constraints # doesn't play nice with DB or other constraint synonyms
  - -Wno-missed-specialisations # brings up a lot more than you'd expect. not sure how actionable they are.
  - -Wno-all-missed-specialisations # see -Wno-missed-specialisations
  - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
  - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. '$'); too strict
  - -Wno-unsafe # Don't use Safe Haskell warnings
  - -Wno-safe # Don't use Safe Haskell warnings
  - -Wno-monomorphism-restriction # Don't warn if the monomorphism restriction is used
  - -Wno-missing-safe-haskell-mode
  - -Wno-prepositive-qualified-module # stylish currently doesn't work with this

library:
  source-dirs: src
  ghc-options:
    - -O2
    - -fprof-auto
  dependencies:
  - bytestring
  - conduit
  - conduit-extra
  - hashable
  - lens
  - megaparsec
  - pipes
  - pipes-text
  - streaming
  - streaming-bytestring
  - streamly
  - streamly-bytestring
  - text
  - unordered-containers
  - word8


executables:
  unique-words:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -rtsopts
    - -O2
    - -fprof-auto
    - -with-rtsopts=-p
    dependencies:
    - unique-words

tests:
  unique-words-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - unique-words

